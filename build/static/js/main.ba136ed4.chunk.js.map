{"version":3,"sources":["BooksAPI.js","components/Shelves.js","components/HomeScreen.js","components/SearchBooks.js","components/BookDetails.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","Shelves","props","updateController","react_default","a","createElement","className","title","key","map","Fragment","filter","index","console","log","style","width","height","backgroundImage","imageLinks","thumbnail","value","onChange","event","target","disabled","authors","HomeScreen","_this$props","this","booksFound","components_Shelves","react_router_dom","to","React","Component","SearchBooks","updateInput","type","placeholder","length","class","role","data-dismiss","aria-label","aria-hidden","BookDetails","useParams","subtitle","publisher","description","App","state","BooksAPI","_this","setState","prevBook","_book","filterNonCompleteBooks","Boolean","setShelfToSearchedBooks","ownedBooks","bookIds","includes","find","ownedBook","response","Array","isArray","filteredBooks","booksWithMatchedShelfs","_this$state","react_router","path","element","components_HomeScreen","components_SearchBooks","components_BookDetails","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.ba136ed4.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction Shelves(props) {\n    let { books, updateController } = props\n    const shelves = [\n      { title: 'Read', key: 'read' },\n      { title: 'Want To Read', key: 'wantToRead' },\n      { title: 'Currently Reading', key: 'currentlyReading' }\n    ]\n    \n    return (\n      <div className=\"bookshelf\">\n        {shelves.map((shelf) => (\n          <>\n            <h2 className=\"bookshelf-title\">{shelf.title}</h2>\n            <div className=\"bookshelf-books\">\n              <ol className=\"books-grid\">\n                {books\n                  .filter((book) => book.shelf === shelf.key)\n                  .map((book, index) => (\n                    <li key={`book-${index}`}>\n                      {/* <Link to=\"/detailPage\">\n                        Details\n                      </Link> */}\n                      {console.log(\"book:\", book)}\n                      <div className=\"book\">\n                        <div className=\"book-top\">\n                          <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks.thumbnail})` }} />\n                          <div className=\"book-shelf-changer\">\n                            <select value={book.shelf || \"none\"} onChange={(event) => updateController(book, event.target.value)}>\n                              <option value=\"move\" disabled>\n                                Move to...\n                              </option>\n                              <option value=\"currentlyReading\">Currently Reading</option>\n                              <option value=\"wantToRead\">Want to Read</option>\n                              <option value=\"read\">Read</option>\n                              <option value=\"none\">None</option>\n                            </select>\n                          </div>\n                        </div>\n                        <div className=\"book-title\">{book.title}</div>\n                        <div className=\"book-authors\">{book.authors}</div>\n                      </div>\n                    </li>\n                  ))}\n              </ol>\n            </div>\n          </>\n        ))}\n      </div>\n    )\n}\nexport default Shelves;","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport '../App.css'\nimport Shelves from './Shelves'\n\nclass HomeScreen extends React.Component {\n\n  render() {\n    const { books, updateController, booksFound } = this.props\n    \n    return (\n      <div className=\"app\">\n        <div className=\"list-books\">\n          <div className=\"list-books-title\">\n            <h1>MyReads</h1>\n          </div>\n            <div className=\"list-books-content\">\n              <Shelves books={ books } updateController={updateController} booksFound={booksFound}/>\n            </div>\n            </div>\n          <div className=\"open-search\">\n            <Link to=\"/search\">\n              <button>Add a book</button>\n            </Link>\n          </div>\n     </div>\n    )\n  }\n}\n\nexport default HomeScreen;\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport '../App.css'\n\nfunction SearchBooks(props) {\n  const { query, booksFound, updateInput, updateController } = props\n  return(\n    <div className=\"search-books\">\n      <div className=\"search-books-bar\">\n        <Link to=\"/\">\n          <button className=\"close-search\">Close</button>\n        </Link>\n        <div className=\"search-books-input-wrapper\">\n          <input \n            type=\"text\" \n            placeholder=\"Search by title or author\"\n            value={ query }\n            onChange={ updateInput }\n          />\n        </div>\n      </div>\n      <div className=\"search-books-results\">\n        <ol className=\"books-grid\"></ol>\n      </div>\n      <div className=\"bookshelf-books\">\n        <ol className=\"books-grid\">\n          {booksFound.length ? booksFound.map((book) => (\n            <li key={book.id}>\n              <div className=\"book\">\n                <div className=\"book-top\">\n                  <div \n                    className=\"book-cover\"\n                    style={{width: 128, height: 193, backgroundImage: `url(${book.imageLinks.thumbnail})`}}\n                  ></div>\n                  <div className=\"book-shelf-changer\">\n                    <select        \n                      value={book.shelf || \"none\"}\n                      onChange={(event) => updateController(book, event.target.value)} \n                    >\n                      <option value=\"move\" disabled>Move to...</option>\n                      <option value=\"currentlyReading\">Currently Reading</option>\n                      <option value=\"wantToRead\">Want to Read</option>\n                      <option value=\"read\">Read</option>\n                      <option value=\"none\">None</option>\n                    </select>\n                  </div>\n                </div>\n                <div className=\"book-title\">{book.title}</div>\n                <div className=\"book-authors\">{book.authors}</div>\n              </div>\n            </li>\n          )): <div class=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\n                <strong>Book not found!</strong> Please try a different search.\n                <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n              </div>\n          }\n        </ol>\n      </div>\n    </div>\n  )\n }\n\nexport default SearchBooks ","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nfunction BookDetails(props) {\n  const { books } = props\n  const { id } = useParams();\n  return (\n    <div className=\"main-description-page\">\n      <div className=\"description-book\">\n        <ul className=\"description-list\">\n          {books\n          .filter(book => book.id === id)\n          .map(book =>\n            <li key={book.id}>\n              <h1 className=\"list-books-title\">My Reads</h1>\n              <h5>Book Details</h5>\n              <h4>Title: {book.title}</h4>\n              <h4>Subtitle: {book.subtitle}</h4>\n              <h4>Authors: {book.authors}</h4>\n              <h4>Publisher: {book.publisher}</h4>\n              <h4>Description: {book.description}</h4>\n            </li>\n          )}\n        </ul>\n      </div>\n    </div>\n  )\n}\nexport default BookDetails","import React from 'react'\nimport { Routes, Route } from 'react-router-dom'\nimport * as BooksAPI from './BooksAPI'\nimport HomeScreen from './components/HomeScreen'\nimport SearchBooks from './components/SearchBooks'\nimport BookDetails from './components/BookDetails'\n\n\nclass App extends React.Component {\n  \n  state = {\n    books: [],\n    query: '',\n    booksFound: []\n  }\n  async componentDidMount() {\n    const books = await BooksAPI.getAll();\n    this.setState({ books });\n  }\n  updateController = (book, shelf) => {\n    BooksAPI.update(book, shelf)\n      .then(() => {\n        this.setState((prevBook) => ({\n        books: prevBook.books\n          .filter((_book) => {\n          return _book.id !== book.id\n        }).concat({...book, shelf})\n      }))\n    })\n  }\n    \n  // filter books\n  filterNonCompleteBooks = (books) => {\n    return books.filter((book) => Boolean(book.imageLinks) || Boolean(book.authors));\n  };\n\n  // set shelf to searched books\n  setShelfToSearchedBooks = (books) => {\n    // renamed the variable `books` to `ownedBooks`\n    const { books: ownedBooks } = this.state; \n    \n    // create an array of ids of all books you have on your own shelf\n    const bookIds = ownedBooks.map((book) => book.id);\n\n    return books.map((book) => {\n      \n      // `includes` will check if the books is in your shelf already\n      if (bookIds.includes(book.id)) {\n        \n        // if it is, it will return a new object with the correct shelf\n        return {\n          ...book,\n          shelf: ownedBooks.find((ownedBook) => ownedBook.id === book.id).shelf,\n        };\n      }\n\n      return book;\n    });\n  };\n\n  // search for books\n  updateInput = (event) => {\n    this.setState({\n      query: event.target.value,\n    });\n\n    BooksAPI.search(event.target.value).then((response) => {\n      if (Array.isArray(response)) {\n        \n        // new simplified way to separate concerns and functionality\n        const filteredBooks = this.filterNonCompleteBooks(response);\n        const booksWithMatchedShelfs = this.setShelfToSearchedBooks(\n          filteredBooks\n        );\n\n        this.setState({\n          booksFound: booksWithMatchedShelfs,\n        });\n      } else {\n        this.setState({\n          booksFound: []\n        });\n      }\n    });\n  };\n\n  render() {\n    const { books, booksFound, query } = this.state;\n    return (\n      <div>\n        <Routes>\n          <Route \n            path=\"*\" \n            element={\n              <HomeScreen \n                books={ books }\n                updateController={ this.updateController }\n                booksFound={ booksFound }\n              />\n            }\n          />\n          <Route\n            path=\"/search\" \n            element={\n              <SearchBooks\n                books={ books }\n                query={ query }\n                booksFound={ booksFound }\n                updateController={ this.updateController }\n                updateInput={ this.updateInput }\n              />\n            }\n          />\n          <Route \n            path=\"/bookDetails/:id\" \n            element={ \n              <BookDetails \n                books={ books }\n              /> \n            } \n          />\n        </Routes>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n, document.getElementById('root'));\n"],"sourceRoot":""}